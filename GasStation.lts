
const T = 2			// size of tank
range A = 1..T		// amount of money or gas

const C = 2			// size of customer
range CID = 1..C	// customer ID range, start from 1

const P = 2			// size of pump
range PID = 1..P	// pump ID range, start from 1

CUSTOMER = CUSTOMER[0],										//CUSTOMER[the amount of gas in the tank]
CUSTOMER[g:0..T] = ( when(g > 0) drives -> CUSTOMER[g-1]	//tank is not empty
				   | when(g != T) pay[a:1..T-g] -> gas[x:A] -> if (x==a) then CUSTOMER[g+x] else ERROR).

CASHIER = ( cs[c:CID].pay[a:A] -> p[PID].start[c][a] -> CASHIER).//customer pay to the cahsier, cashier offers a pump

//LOCK = ( acquire-> release -> LOCK ).
PUMP = ( start[c:CID][a:A] -> gas[c][a] ->PUMP).				//pump start(and gas) with customerID and amount of gas.
//PUMP = ( acquire-> start[c:CID][a:A] -> gas[c][a] -> release ->PUMP).
//||LOCK_PUMP = (PUMP || LOCK). 

GETPUMP = (p[PID].gas[c:CID][g:A] -> cs[c].gas[g] -> GETPUMP).	//connecting two events, pump gas and customer gas

||CUSTOMER_C_PUMP_P = ( cs[CID]:CUSTOMER || CASHIER || p[PID]:PUMP || GETPUMP).


range CPRO = 1..2	// Setting 2 customer FIFO property
property	BEGIN = (cs[c1:CPRO].pay[A] -> CASH[c1]),				//first customer pays
			CASH[c1:CPRO] = (cs[c1].gas[A] -> BEGIN					//first customer gases and finishes paying
							|cs[c2:CPRO].pay[A] -> CASH[c1][c2]),	//second customer pays
			CASH[c1:CPRO][c2:CPRO] = (cs[c1].gas[A] -> CASH[c2]).	//first customer shall pay before second

||CUSTOMER_C_PUMP_P_FIFO = (CUSTOMER_C_PUMP_P || BEGIN).
